import { sqliteTable, text, integer } from "drizzle-orm/sqlite-core";
import { sql, relations } from "drizzle-orm";

const liveNow = sql`(current_timestamp)`;

export const users = sqliteTable("users", {
  // The ID is now a text field, intended for UUIDs generated by your application.
  id: text("id").primaryKey().notNull(),
  name: text("name").notNull(),
  password: text("password").notNull(),
  createdAt: text("created_at").default(liveNow).notNull(),
});

export const pages = sqliteTable("pages", {
  id: integer("id").primaryKey({ autoIncrement: true }),
  title: text("title").notNull().unique(),
  // Updated to text to match the new type of users.id
  userId: text("user_id")
    .notNull()
    .references(() => users.id, { onDelete: "cascade" }),
  createdAt: text("created_at").default(liveNow).notNull(),
});

export const nodes = sqliteTable("nodes", {
  id: integer("id").primaryKey({ autoIncrement: true }),
  name: text("name").notNull(),
  fullness: integer("fullness").notNull().default(0),
  maximum: integer("maximum").notNull().default(5),
  group: integer("group", { mode: "boolean" }).notNull().default(false),
  pageId: integer("page_id")
    .notNull()
    .references(() => pages.id, { onDelete: "cascade" }),
  createdAt: text("created_at").default(liveNow).notNull(),
});

export const groupNodes = sqliteTable("group_nodes", {
  parentNodeId: integer("parent_node_id")
    .notNull()
    .references(() => nodes.id, { onDelete: "cascade" }),
  childrenNodeId: integer("children_node_id")
    .notNull()
    .references(() => nodes.id, { onDelete: "cascade" }),
  createdAt: text("created_at").default(liveNow).notNull(),
});

export const usersRelations = relations(users, ({ many }) => ({
  pages: many(pages),
}));

export const pagesRelations = relations(pages, ({ one, many }) => ({
  user: one(users, {
    fields: [pages.userId],
    references: [users.id],
  }),
  nodes: many(nodes),
}));

export const nodesRelations = relations(nodes, ({ one, many }) => ({
  page: one(pages, {
    fields: [nodes.pageId],
    references: [pages.id],
  }),
  parentGroups: many(groupNodes, { relationName: "parentNodes" }),
  childGroups: many(groupNodes, { relationName: "childNodes" }),
}));

export const groupNodesRelations = relations(groupNodes, ({ one }) => ({
  parentNode: one(nodes, {
    fields: [groupNodes.parentNodeId],
    references: [nodes.id],
    relationName: "parentNodes",
  }),
  childrenNode: one(nodes, {
    fields: [groupNodes.childrenNodeId],
    references: [nodes.id],
    relationName: "childNodes",
  }),
}));

export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;

export type Page = typeof pages.$inferSelect;
export type NewPage = typeof pages.$inferInsert;

export type Node = typeof nodes.$inferSelect;
export type NewNode = typeof nodes.$inferInsert;

export type GroupNode = typeof groupNodes.$inferSelect;
export type NewGroupNode = typeof groupNodes.$inferInsert;

export const schema = {
  users,
  pages,
  nodes,
  groupNodes,
  usersRelations,
  pagesRelations,
  nodesRelations,
  groupNodesRelations,
};
